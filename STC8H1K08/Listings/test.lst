C51 COMPILER V9.54   TEST                                                                  01/17/2025 17:53:34 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE TEST
OBJECT MODULE PLACED IN .\Objects\test.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE test.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\test.lst) TABS(2) OBJECT(.\Objects\test.obj)

line level    source

   1          #include "reg51.h"
   2          #include "intrins.h"
   3          
   4          sfr     P_SW2   =   0xba;
   5          
   6          #define I2CCFG      (*(unsigned char volatile xdata *)0xfe80)
   7          #define I2CMSCR     (*(unsigned char volatile xdata *)0xfe81)
   8          #define I2CMSST     (*(unsigned char volatile xdata *)0xfe82)
   9          #define I2CSLCR     (*(unsigned char volatile xdata *)0xfe83)
  10          #define I2CSLST     (*(unsigned char volatile xdata *)0xfe84)
  11          #define I2CSLADR    (*(unsigned char volatile xdata *)0xfe85)
  12          #define I2CTXD      (*(unsigned char volatile xdata *)0xfe86)
  13          #define I2CRXD      (*(unsigned char volatile xdata *)0xfe87)
  14          
  15          sfr     P1M1    =   0x91;
  16          sfr     P1M0    =   0x92;
  17          sfr     P0M1    =   0x93;
  18          sfr     P0M0    =   0x94;
  19          sfr     P2M1    =   0x95;
  20          sfr     P2M0    =   0x96;
  21          sfr     P3M1    =   0xb1;
  22          sfr     P3M0    =   0xb2;
  23          sfr     P4M1    =   0xb3;
  24          sfr     P4M0    =   0xb4;
  25          sfr     P5M1    =   0xc9;
  26          sfr     P5M0    =   0xca;
  27          
  28          sfr P5   = 0xC8;
  29          
  30          
  31          // PWM引脚定义
  32          sbit PWM_A1 = P1^7; // 电机A正转
  33          sbit PWM_A2 = P5^4; // 电机A反转
  34          sbit PWM_B2 = P3^4; // 电机B正转
  35          sbit PWM_B1 = P3^3; // 电机B反转
  36          
  37          sbit L_RGB_r = P3^2 ;
  38          sbit L_RGB_g = P3^5 ;
  39          sbit L_RGB_b = P3^6 ;
  40          
  41          sbit R_RGB_r = P1^6 ;
  42          sbit R_RGB_g = P1^2 ;
  43          sbit R_RGB_b = P1^0 ;
  44          
  45          
  46          // 状态标志位
  47          bit isda; // 设备地址标志
  48          bit isma; // 存储地址标志
  49          unsigned char addr; // 存储接收到的内存地址
  50          unsigned char buffer[8]; // 存储接收到的数据
  51          int count_buffer,count,PWM;
  52          
  53          void Delay1ms(void) //@22.1184MHz
  54          {
C51 COMPILER V9.54   TEST                                                                  01/17/2025 17:53:34 PAGE 2   

  55   1        unsigned char data i, j;
  56   1      
  57   1        i = 29;
  58   1        j = 183;
  59   1        do
  60   1        {
  61   2          while (--j);
  62   2        } while (--i);
  63   1      }
  64          
  65          void delay_ms(unsigned int ms){
  66   1        unsigned int x ;
  67   1        for(x = 0 ; x<ms ;++x){Delay1ms();}
  68   1          
  69   1      }
  70          
  71          void R_RGBColor(unsigned char red, unsigned char green, unsigned char blue) {
  72   1          R_RGB_r = (red > 0) ? 0 : 1;   // 红色灯
  73   1          R_RGB_g = (green > 0) ? 0 : 1; // 绿色灯
  74   1          R_RGB_b = (blue > 0) ? 0 : 1;  // 蓝色灯
  75   1      }
  76          void L_RGBColor(unsigned char red, unsigned char green, unsigned char blue) {
  77   1          L_RGB_r = (red > 0) ? 0 : 1;   // 红色灯
  78   1          L_RGB_g = (green > 0) ? 0 : 1; // 绿色灯
  79   1          L_RGB_b = (blue > 0) ? 0 : 1;  // 蓝色灯
  80   1      }
  81          
  82          // 控制电机的速度
  83          void setMotorSpeed(int pwmA, int pwmB) {
  84   1          if (pwmA == 1) {
  85   2              PWM_A1 = 0; // 控制电机A正转
  86   2              PWM_A2 = 1;
  87   2          } else if (pwmA == 2) {
  88   2              PWM_A1 = 1;
  89   2              PWM_A2 = 0; // 控制电机A反转
  90   2          } else {
  91   2              PWM_A1 = 0; // 停止电机A
  92   2              PWM_A2 = 0;
  93   2          }
  94   1      
  95   1          if (pwmB == 1) {
  96   2              PWM_B1 = 0; // 控制电机B正转
  97   2              PWM_B2 = 1;
  98   2          } else if (pwmB == 2) {
  99   2              PWM_B1 = 1;
 100   2              PWM_B2 = 0; // 控制电机B反转
 101   2          } else {
 102   2              PWM_B1 = 0; // 停止电机B
 103   2              PWM_B2 = 0;
 104   2          }
 105   1          
 106   1      }
 107          
 108          void I2C_Isr() interrupt 24
 109          {
 110   1          _push_(P_SW2);
 111   1          P_SW2 |= 0x80;
 112   1      
 113   1          if (I2CSLST & 0x40)
 114   1          {
 115   2              I2CSLST &= ~0x40;                    //处理START事件
 116   2          }
C51 COMPILER V9.54   TEST                                                                  01/17/2025 17:53:34 PAGE 3   

 117   1          else if (I2CSLST & 0x20)
 118   1          {
 119   2              I2CSLST &= ~0x20;                       //处理RECV事件
 120   2              if (isda)
 121   2              {
 122   3                  isda = 0;                           //处理RECV事件（RECV DEVICE ADDR）
 123   3              }
 124   2              else if (isma)
 125   2              {
 126   3                  isma = 0;                           //处理RECV事件（RECV MEMORY ADDR）
 127   3                  addr = I2CRXD;
 128   3                  I2CTXD = buffer[addr];
 129   3              }
 130   2              else
 131   2              {   
 132   3                  buffer[addr++] = I2CRXD;            //处理RECV事件（RECV DATA）
 133   3                  if(addr>=8)addr=0;
 134   3                 
 135   3              }
 136   2          }
 137   1          else if (I2CSLST & 0x10)
 138   1          {
 139   2              I2CSLST &= ~0x10;                       //处理SEND事件
 140   2              if (I2CSLST & 0x02)
 141   2              {
 142   3                  I2CTXD = 0xff;                      //接收到NAK则停止读取数据
 143   3              }
 144   2              else
 145   2              {
 146   3                  I2CTXD = buffer[++addr];            //接收到ACK则继续读取数据
 147   3              }
 148   2          }
 149   1          else if (I2CSLST & 0x08)
 150   1          {
 151   2              I2CSLST &= ~0x08;                       //处理STOP事件
 152   2              isda = 1;
 153   2              isma = 1;
 154   2          }
 155   1      
 156   1          _pop_(P_SW2);
 157   1      }
 158            
 159          void main()
 160          {   
 161   1        // 初始化引脚为低电平
 162   1          PWM_A1 = 0;
 163   1          PWM_A2 = 0;
 164   1          PWM_B1 = 0;
 165   1          PWM_B2 = 0;
 166   1        
 167   1          R_RGB_r = 1; // 默认关闭RGB灯
 168   1          R_RGB_g = 1;
 169   1          R_RGB_b = 1;
 170   1        
 171   1          L_RGB_r = 1; 
 172   1          L_RGB_g = 1;
 173   1          L_RGB_b = 1;
 174   1        
 175   1          P0M0 = 0x00;
 176   1          P0M1 = 0xFF;
 177   1          P1M0 = 0x00;
 178   1          P1M1 = 0x00;
C51 COMPILER V9.54   TEST                                                                  01/17/2025 17:53:34 PAGE 4   

 179   1          P2M0 = 0x00;
 180   1          P2M1 = 0x00;
 181   1          P3M0 = 0x7C;
 182   1          P3M1 = 0x00;
 183   1          P4M0 = 0x00;
 184   1          P4M1 = 0x00;
 185   1          P5M0 = 0x00;
 186   1          P5M1 = 0x00;
 187   1      
 188   1          P_SW2 = 0x80;
 189   1        
 190   1      
 191   1          I2CCFG = 0x81;                              //使能I2C从机模式
 192   1          I2CSLADR = 0X30;                            //设置从机设备地址寄存器I2CSLADR=0101_1010B
 193   1                                                      //即I2CSLADR[7:1]=010_1101B,MA=0B。
 194   1                                                      //由于MA为0,主机发送的的设备地址必须与
 195   1                                                      //I2CSLADR[7:1]相同才能访问此I2C从机设备。
 196   1                                                      //主机若需要写数据则要发送5AH(0101_1010B)
 197   1                                                      //主机若需要读数据则要发送5BH(0101_1011B)
 198   1          I2CSLST = 0x00;
 199   1          I2CSLCR = 0x78; // 0x00                     //禁止从机模式中断
 200   1          EA = 1;
 201   1          
 202   1          isda = 1;                                   //用户变量初始化
 203   1          isma = 1;
 204   1          addr = 1;
 205   1          I2CTXD = buffer[addr];
 206   1          setMotorSpeed(0,0);
 207   1            
 208   1          while (1){
 209   2                  
 210   2            if(buffer[0] == 1){
 211   3            
 212   3              if(count>100)count=0;  // 如果计数器count的值大于100，则将其重置为0
 213   3               count+=1;  // 计数器count的值加1
 214   3               Delay1ms();  // 延时1微秒
 215   3      
 216   3               PWM=buffer[6];  // 从buffer数组的第三个元素（索引为2）读取PWM值
 217   3      
 218   3              if(PWM>100)PWM=100;  // 如果PWM值大于100，则将其限制在100
 219   3              if(PWM<0)PWM=0;  // 如果PWM值小于0，则将其限制在0
 220   3      
 221   3              if(count<PWM)  // 如果计数器count的值小于PWM值
 222   3               {
 223   4                setMotorSpeed(buffer[2],buffer[4]);  // 调用setMotorSpeed函数设置电机速度
 224   4               }
 225   3              else 
 226   3                setMotorSpeed(0,0);  // 否则，将电机速度设置为0（停止电机）
 227   3            }
 228   2            
 229   2            if(buffer[0] == 2){
 230   3              
 231   3              if(buffer[6] == 1){
 232   4              
 233   4                R_RGBColor(1,0,0);
 234   4                L_RGBColor(1,0,0);
 235   4                delay_ms(200);    
 236   4                
 237   4                R_RGBColor(0,1,0);
 238   4                L_RGBColor(0,1,0);
 239   4                delay_ms(200);      
 240   4                
C51 COMPILER V9.54   TEST                                                                  01/17/2025 17:53:34 PAGE 5   

 241   4                R_RGBColor(0,0,1);
 242   4                L_RGBColor(0,0,1);
 243   4                delay_ms(200);    
 244   4      
 245   4                R_RGBColor(0,0,0);
 246   4                L_RGBColor(0,0,0);
 247   4                delay_ms(50);           
 248   4              }
 249   3              
 250   3              
 251   3            }
 252   2            
 253   2          }   
 254   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    671    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     15    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
